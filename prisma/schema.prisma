generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ROlES {
  USER
  ADMIN
}

enum SubscriptionPlan {
  FREE
  PAID
  NOTPAID
}

model User {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  clerkId     String       @unique
  email       String       @unique
  username    String
  role        ROlES        @default(USER)
  payment    SubscriptionPlan @default(FREE)
  cardlicence CarLicence[]

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  subscriptions Subscriptions[]
  initiatePayment InitiatePayment[]
}

model CarLicence {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  carId     String
  userId    String   @db.ObjectId
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user              User                @relation(fields: [userId], references: [id])
  licence_documents Licence_documents[]
}


model Licence_documents {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  url         String
  expriryDate String     @default("NULL")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  licenceId   String     @db.ObjectId
  carLicence  CarLicence @relation(fields: [licenceId], references: [id])
}

model Subscriptions {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  paidcurrentmonth     Boolean  @default(false)
  daysfromlastpaycount Int      @default(0)
  lastpaymentdate      DateTime
  tx_ref               String   @unique
  amountpaid           Int
  nextpaymentdate      DateTime
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete:Cascade)
  userId               String   @db.ObjectId
}

model InitiatePayment {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  txRef     String  @unique
  amount    Int
  status    String @default("pending")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}





